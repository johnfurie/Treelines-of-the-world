MIN=10,
MAX=50000,
CHMfilter=3
)
writeOGR(segt, file.path(envrmt$path_002_processed, "cenith_seg_t.shp"),layer="testShape",driver="ESRI Shapefile")
writeOGR(segs, file.path(envrmt$path_002_processed, "cenith_seg_s.shp"),layer="testShape",driver="ESRI Shapefile")
writeOGR(segts, file.path(envrmt$path_002_processed, "cenith_seg_ts.shp"),layer="testShape",driver="ESRI Shapefile")
rgb_tree_shrub  <- raster::stack(file.path(envrmt$path_03_Segmentation_sites_RGB, "RGB_tree_shrub.tif"))
rgb_tree        <- raster::stack(file.path(envrmt$path_03_Segmentation_sites_RGB, "RGB_tree.tif"))
rgb_shrub       <- raster::stack(file.path(envrmt$path_03_Segmentation_sites_RGB, "RGB_shrub.tif"))
vp_tree_shrub   <-  rgdal::readOGR(file.path(envrmt$path_03_Segmentation_sites_shp,"tpos_tree_shrub_t.shp"))
vp_tree         <-  rgdal::readOGR(file.path(envrmt$path_03_Segmentation_sites_shp,"tpos_tree.shp"))
vp_shrub        <-  rgdal::readOGR(file.path(envrmt$path_03_Segmentation_sites_shp,"tpos_shrub.shp"))
#load las file
tree <- file.path(envrmt$path_las, "tree.las")
tree_shrub <- file.path(envrmt$path_las, "tree_shrub.las")
shrub <- file.path(envrmt$path_las, "shrub.las")
# read las files
last = lidR::readLAS(tree)
lass = lidR::readLAS(shrub)
lasts = lidR::readLAS(tree_shrub)
col <- pastel.colors(200)
#find treetops
# 1. tree
ttopst <- find_trees(last, lmf(ws = 3))
# write data
writeOGR(ttopst, file.path(envrmt$path_002_processed, "lidr_tpos_t.shp"),layer="testShape",driver="ESRI Shapefile")
pt   <-  rgdal::readOGR(file.path(envrmt$path_002_processed,"lidr_tpos_t.shp"))
# plot with maptools
plot(chm_tree)
plot(vp_tree, add = T)
plot(pt, las=1, bty="l", col="red", pch=19, add = T)
plotRGB(rgb_tree)
plot(vp_tree, add = T)
plot(pt, las=1, bty="l", col="red", pch=19, add = T)
# 3d plot
x = plot(last)
add_treetops3d(x, ttopst)
# 2. shrub
ttopss <- find_trees(lass, lmf(ws = 5))
# write data
writeOGR(ttopss, file.path(envrmt$path_002_processed, "lidr_tpos_s.shp"),layer="testShape",driver="ESRI Shapefile")
ps   <-  rgdal::readOGR(file.path(envrmt$path_002_processed,"lidr_tpos_s.shp"))
# plot with maptools
plot(chm_shrub)
plot(vp_shrub, add = T)
plot(ps, las=1, bty="l", col="red", pch=19, add = T)
plotRGB(rgb_shrub)
plot(vp_shrub, add = T)
plot(ps, las=1, bty="l", col="red", pch=19, add = T)
# 3d plot
x = plot(lass)
add_treetops3d(x, ttopss)
# 3. tree shrub
ttopsts <- find_trees(lasts, lmf(ws = 5))
# write data
writeOGR(ttopsts, file.path(envrmt$path_002_processed, "lidr_tpos_ts.shp"),layer="testShape",driver="ESRI Shapefile")
pts   <-  rgdal::readOGR(file.path(envrmt$path_002_processed,"lidr_tpos_ts.shp"))
# plot with maptools
plot(chm_tree_shrub)
plot(vp_tree_shrub, add = T)
plot(pts, las=1, bty="l", col="red", pch=19, add = T)
plotRGB(rgb_tree_shrub)
plot(vp_tree_shrub, add = T)
plot(pts, las=1, bty="l", col="red", pch=19, add = T)
# 3d plot
x = plot(lasts)
add_treetops3d(x, ttopsts)
#load las file
tree <- file.path(envrmt$path_las, "tree.las")
# read las files
last = lidR::readLAS(tree)
lass = lidR::readLAS(shrub)
lasts = lidR::readLAS(tree_shrub)
col <- pastel.colors(200)
require(raster)
require(envimaR)
require(link2GI)
# define needed libs
libs = c("link2GI","lidR")
# define src folder
pathdir = "repo/src/"
#set root folder for uniPC or laptop
root_folder = alternativeEnvi(root_folder = "C:/Users/Niklas/Documents/GitHub/Treelines-of-the-world",
alt_env_id = "COMPUTERNAME",
alt_env_value = "PCRZP",
alt_env_root_folder = "F:/edu/Envimaster-Geomorph")
#source environment script
source(file.path(root_folder, paste0(pathdir,"01b_environment_setup_with_SAGA.R")))
#############################################################################################
#############################################################################################
# load files for visualization
chm_tree_shrub  <- raster::raster(file.path(envrmt$path_03_Segmentation_sites_CHM, "CHM_tree_shrub.tif"))
chm_tree        <- raster::raster(file.path(envrmt$path_03_Segmentation_sites_CHM, "CHM_tree.tif"))
chm_shrub       <- raster::raster(file.path(envrmt$path_03_Segmentation_sites_CHM, "CHM_shrub.tif"))
rgb_tree_shrub  <- raster::stack(file.path(envrmt$path_03_Segmentation_sites_RGB, "RGB_tree_shrub.tif"))
rgb_tree        <- raster::stack(file.path(envrmt$path_03_Segmentation_sites_RGB, "RGB_tree.tif"))
rgb_shrub       <- raster::stack(file.path(envrmt$path_03_Segmentation_sites_RGB, "RGB_shrub.tif"))
vp_tree_shrub   <-  rgdal::readOGR(file.path(envrmt$path_03_Segmentation_sites_shp,"tpos_tree_shrub_t.shp"))
vp_tree         <-  rgdal::readOGR(file.path(envrmt$path_03_Segmentation_sites_shp,"tpos_tree.shp"))
vp_shrub        <-  rgdal::readOGR(file.path(envrmt$path_03_Segmentation_sites_shp,"tpos_shrub.shp"))
#load las file
tree <- file.path(envrmt$path_las, "tree.las")
tree_shrub <- file.path(envrmt$path_las, "tree_shrub.las")
shrub <- file.path(envrmt$path_las, "shrub.las")
# read las files
last = lidR::readLAS(tree)
lass = lidR::readLAS(shrub)
lasts = lidR::readLAS(tree_shrub)
col <- pastel.colors(200)
# 1. tree
ttopst <- find_trees(last, lmf(ws = 3))
# 1. tree
ttopst <- find_trees(last, lmf(ws = 3))
# 2. shrub
ttopss <- lidr::find_trees(lass, lmf(ws = 5))
#############################################################################################
#############################################################################################
library(lidr)
#############################################################################################
#############################################################################################
library(lidR)
# 1. tree
ttopst <- lidR::find_trees(last, lmf(ws = 3))
# 1. tree
ttopst <- lidR::find_trees(last, lmf(ws = 3))
# 1. tree
ttopst <- find_trees(last, lmf(ws = 3))
#############################################################################################
#############################################################################################
install.packages(lidR)
#############################################################################################
#############################################################################################
install.packages('lidR')
install.packages("lidR")
install.packages("lidR")
install.packages("lidR")
#############################################################################################
#############################################################################################
install.packages('lidR')
require(raster)
require(envimaR)
require(link2GI)
# define needed libs
libs = c("link2GI","lidR")
# define src folder
pathdir = "repo/src/"
#set root folder for uniPC or laptop
root_folder = alternativeEnvi(root_folder = "C:/Users/Niklas/Documents/GitHub/Treelines-of-the-world",
alt_env_id = "COMPUTERNAME",
alt_env_value = "PCRZP",
alt_env_root_folder = "F:/edu/Envimaster-Geomorph")
#source environment script
source(file.path(root_folder, paste0(pathdir,"01b_environment_setup_with_SAGA.R")))
chm_tree_shrub  <- raster::raster(file.path(envrmt$path_03_Segmentation_sites_CHM, "CHM_tree_shrub.tif"))
chm_tree        <- raster::raster(file.path(envrmt$path_03_Segmentation_sites_CHM, "CHM_tree.tif"))
chm_shrub       <- raster::raster(file.path(envrmt$path_03_Segmentation_sites_CHM, "CHM_shrub.tif"))
rgb_tree_shrub  <- raster::stack(file.path(envrmt$path_03_Segmentation_sites_RGB, "RGB_tree_shrub.tif"))
rgb_tree        <- raster::stack(file.path(envrmt$path_03_Segmentation_sites_RGB, "RGB_tree.tif"))
rgb_shrub       <- raster::stack(file.path(envrmt$path_03_Segmentation_sites_RGB, "RGB_shrub.tif"))
vp_tree_shrub   <-  rgdal::readOGR(file.path(envrmt$path_03_Segmentation_sites_shp,"tpos_tree_shrub_t.shp"))
vp_tree         <-  rgdal::readOGR(file.path(envrmt$path_03_Segmentation_sites_shp,"tpos_tree.shp"))
vp_shrub        <-  rgdal::readOGR(file.path(envrmt$path_03_Segmentation_sites_shp,"tpos_shrub.shp"))
#load las file
tree <- file.path(envrmt$path_las, "tree.las")
tree_shrub <- file.path(envrmt$path_las, "tree_shrub.las")
shrub <- file.path(envrmt$path_las, "shrub.las")
# read las files
last = lidR::readLAS(tree)
lass = lidR::readLAS(shrub)
lasts = lidR::readLAS(tree_shrub)
col <- pastel.colors(200)
# 1. tree
ttopst <- find_trees(last, lmf(ws = 3))
writeOGR(ttopst, file.path(envrmt$path_002_processed, "lidr_tpos_t.shp"),layer="testShape",driver="ESRI Shapefile")
pt   <-  rgdal::readOGR(file.path(envrmt$path_002_processed,"lidr_tpos_t.shp"))
# plot with maptools
plot(chm_tree)
plot(vp_tree, add = T)
plot(pt, las=1, bty="l", col="red", pch=19, add = T)
library(rgdal)
# write data
writeOGR(ttopst, file.path(envrmt$path_002_processed, "lidr_tpos_t.shp"),layer="testShape",driver="ESRI Shapefile")
pt   <-  rgdal::readOGR(file.path(envrmt$path_002_processed,"lidr_tpos_t.shp"))
# plot with maptools
plot(chm_tree)
plot(vp_tree, add = T)
plot(pt, las=1, bty="l", col="red", pch=19, add = T)
plotRGB(rgb_tree)
plot(vp_tree, add = T)
plot(pt, las=1, bty="l", col="red", pch=19, add = T)
# 3d plot
x = plot(last)
add_treetops3d(x, ttopst)
# 2. shrub
ttopss <- lidr::find_trees(lass, lmf(ws = 5))
add_treetops3d(x, ttopsts)
# 2. shrub
ttopss <- lidr::find_trees(lass, lmf(ws = 5))
# 2. shrub
ttopss <- lidR::find_trees(lass, lmf(ws = 5))
# write data
writeOGR(ttopss, file.path(envrmt$path_002_processed, "lidr_tpos_s.shp"),layer="testShape",driver="ESRI Shapefile")
ps   <-  rgdal::readOGR(file.path(envrmt$path_002_processed,"lidr_tpos_s.shp"))
# plot with maptools
plot(chm_shrub)
plot(vp_shrub, add = T)
plot(ps, las=1, bty="l", col="red", pch=19, add = T)
plotRGB(rgb_shrub)
plot(vp_shrub, add = T)
plot(ps, las=1, bty="l", col="red", pch=19, add = T)
# 3d plot
x = plot(lass)
add_treetops3d(x, ttopss)
# 3. tree shrub
ttopsts <- find_trees(lasts, lmf(ws = 5))
# write data
writeOGR(ttopsts, file.path(envrmt$path_002_processed, "lidr_tpos_ts.shp"),layer="testShape",driver="ESRI Shapefile")
pts   <-  rgdal::readOGR(file.path(envrmt$path_002_processed,"lidr_tpos_ts.shp"))
# plot with maptools
plot(chm_tree_shrub)
plot(vp_tree_shrub, add = T)
plot(pts, las=1, bty="l", col="red", pch=19, add = T)
plotRGB(rgb_tree_shrub)
plot(vp_tree_shrub, add = T)
plot(pts, las=1, bty="l", col="red", pch=19, add = T)
# 3d plot
x = plot(lasts)
add_treetops3d(x, ttopsts)
l
# define needed libs
libs = c("link2GI","sf","mapview","rgdal","CENITH","doParallel","parallel","uavRst","maptools")
chm_tree_shrub  <- raster::raster(file.path(envrmt$path_03_Segmentation_sites_CHM, "CHM_tree_shrub.tif"))
chm_tree        <- raster::raster(file.path(envrmt$path_03_Segmentation_sites_CHM, "CHM_tree.tif"))
chm_shrub       <- raster::raster(file.path(envrmt$path_03_Segmentation_sites_CHM, "CHM_shrub.tif"))
rgb_tree_shrub  <- raster::stack(file.path(envrmt$path_03_Segmentation_sites_RGB, "RGB_tree_shrub.tif"))
rgb_tree        <- raster::stack(file.path(envrmt$path_03_Segmentation_sites_RGB, "RGB_tree.tif"))
rgb_shrub       <- raster::stack(file.path(envrmt$path_03_Segmentation_sites_RGB, "RGB_shrub.tif"))
vp_tree_shrub   <-  rgdal::readOGR(file.path(envrmt$path_03_Segmentation_sites_shp,"ft_tpos_ts.shp"))
vp_tree         <-  rgdal::readOGR(file.path(envrmt$path_03_Segmentation_sites_shp,"ft_tpos_t.shp"))
vp_shrub        <-  rgdal::readOGR(file.path(envrmt$path_03_Segmentation_sites_shp,"ft_tpos_s.shp"))
#run cluster
cl =  makeCluster(detectCores()-1)
registerDoParallel(cl)
# chm smoothing
chm_tree <- CHMsmoothing(chm_tree, filter = "Gaussian", ws = 39)
chm_shrub <- CHMsmoothing(chm_shrub, filter = "Gaussian", ws = 39)
chm_tree_shrub <- CHMsmoothing(chm_tree_shrub, filter = "Gaussian", ws = 39)
# rLidar treeposition finder
# tree
rl_t <- treepos_RL(chm = chm_tree,
movingWin = 23,
minTreeAlt = 1.5)
#convert treetop raster to point shape
pt = rasterToPoints(rl_t ,spatial = TRUE)
#Write shape
writeOGR(pt, file.path(envrmt$path_002_processed, "rl_tpos_t.shp"),layer="testShape",driver="ESRI Shapefile")
pt<-  rgdal::readOGR(file.path(envrmt$path_002_processed, "rl_tpos_t.shp"))
# plot with maptools
plot(chm_tree)
plot(vp_tree, add = T)
plot(pt, las=1, bty="l", col="red", pch=19, add = T)
plotRGB(rgb_tree)
plot(vp_tree, add = T)
plot(pt, las=1, bty="l", col="red", pch=19, add = T)
# 2 shrub
#forest tools treetop finder
rl_s <- treepos_RL(chm = chm_shrub,
movingWin = 13,
minTreeAlt = 0.6)
#convert treetop raster to point shape
ps = rasterToPoints(rl_s,spatial = TRUE)
#Write shape
writeOGR(ps, file.path(envrmt$path_002_processed, "rl_tpos_s.shp"),layer="testShape",driver="ESRI Shapefile")
ps<-  rgdal::readOGR(file.path(envrmt$path_002_processed, "rl_tpos_s.shp"))
# plot with maptools
plot(chm_shrub)
plot(vp_shrub, add = T)
plot(ps, las=1, bty="l", col="red", pch=19, add = T)
plotRGB(rgb_shrub)
plot(vp_shrub, add = T)
plot(ps, las=1, bty="l", col="red", pch=19, add = T)
# 3 tree shrub
rl_ts <- treepos_RL(chm = chm_tree_shrub,
movingWin = 7,
minTreeAlt = 0.6)
#convert treetop raster to point shape
pts = rasterToPoints(rl_ts,spatial = TRUE)
#Write/read as shapefile
writeOGR(pts, file.path(envrmt$path_002_processed, "rl_tpos_ts.shp"),layer="testShape",driver="ESRI Shapefile")
pts<-  rgdal::readOGR(file.path(envrmt$path_002_processed, "rl_tpos_ts.shp"))
# plot with maptools
plot(chm_tree_shrub)
plot(vp_tree_shrub, add = T)
plot(pts, las=1, bty="l", col="red", pch=19, add = T)
plotRGB(rgb_tree_shrub)
plot(vp_tree_shrub, add = T)
plot(pts, las=1, bty="l", col="red", pch=19, add = T)
# define needed libs
libs = library(c("link2GI","sf","mapview","rgdal","CENITH","doParallel","parallel","uavRst","maptools"))
# plot with maptools
plot(chm_tree)
plot(vp_tree, add = T)
plot(pt, las=1, bty="l", col="red", pch=19, add = T)
ttopst <- find_trees(last, lmf(ws = 5))
#library(rgdal)
# write data
writeOGR(ttopst, file.path(envrmt$path_002_processed, "lidr_tpos_t.shp"),layer="testShape",driver="ESRI Shapefile")
pt   <-  rgdal::readOGR(file.path(envrmt$path_002_processed,"lidr_tpos_t.shp"))
# plot with maptools
plot(chm_tree)
plot(vp_tree, add = T)
plot(pt, las=1, bty="l", col="red", pch=19, add = T)
ttopst <- find_trees(last, lmf(ws = 4))
#library(rgdal)
# write data
writeOGR(ttopst, file.path(envrmt$path_002_processed, "lidr_tpos_t.shp"),layer="testShape",driver="ESRI Shapefile")
pt   <-  rgdal::readOGR(file.path(envrmt$path_002_processed,"lidr_tpos_t.shp"))
# plot with maptools
plot(chm_tree)
plot(vp_tree, add = T)
plot(pt, las=1, bty="l", col="red", pch=19, add = T)
ttopst <- find_trees(last, lmf(ws = 3))
#library(rgdal)
# write data
writeOGR(ttopst, file.path(envrmt$path_002_processed, "lidr_tpos_t.shp"),layer="testShape",driver="ESRI Shapefile")
pt   <-  rgdal::readOGR(file.path(envrmt$path_002_processed,"lidr_tpos_t.shp"))
# plot with maptools
plot(chm_tree)
plot(vp_tree, add = T)
plot(pt, las=1, bty="l", col="red", pch=19, add = T)
ttopst <- find_trees(last, lmf(ws = 2))
#library(rgdal)
# write data
writeOGR(ttopst, file.path(envrmt$path_002_processed, "lidr_tpos_t.shp"),layer="testShape",driver="ESRI Shapefile")
pt   <-  rgdal::readOGR(file.path(envrmt$path_002_processed,"lidr_tpos_t.shp"))
# plot with maptools
plot(chm_tree)
plot(vp_tree, add = T)
plot(pt, las=1, bty="l", col="red", pch=19, add = T)
ttopst <- find_trees(last, lmf(ws = 3.5))
#library(rgdal)
# write data
writeOGR(ttopst, file.path(envrmt$path_002_processed, "lidr_tpos_t.shp"),layer="testShape",driver="ESRI Shapefile")
pt   <-  rgdal::readOGR(file.path(envrmt$path_002_processed,"lidr_tpos_t.shp"))
# plot with maptools
plot(chm_tree)
plot(vp_tree, add = T)
plot(pt, las=1, bty="l", col="red", pch=19, add = T)
ttopst <- find_trees(last, lmf(ws = 3))
#library(rgdal)
# write data
writeOGR(ttopst, file.path(envrmt$path_002_processed, "lidr_tpos_t.shp"),layer="testShape",driver="ESRI Shapefile")
pt   <-  rgdal::readOGR(file.path(envrmt$path_002_processed,"lidr_tpos_t.shp"))
# plot with maptools
plot(chm_tree)
plot(vp_tree, add = T)
plot(pt, las=1, bty="l", col="red", pch=19, add = T)
ttopst <- find_trees(last, lmf(ws = 3.5))
#library(rgdal)
# write data
writeOGR(ttopst, file.path(envrmt$path_002_processed, "lidr_tpos_t.shp"),layer="testShape",driver="ESRI Shapefile")
pt   <-  rgdal::readOGR(file.path(envrmt$path_002_processed,"lidr_tpos_t.shp"))
# plot with maptools
plot(chm_tree)
plot(vp_tree, add = T)
plot(pt, las=1, bty="l", col="red", pch=19, add = T)
ttopst <- find_trees(last, lmf(ws = 3))
#library(rgdal)
# write data
writeOGR(ttopst, file.path(envrmt$path_002_processed, "lidr_tpos_t.shp"),layer="testShape",driver="ESRI Shapefile")
pt   <-  rgdal::readOGR(file.path(envrmt$path_002_processed,"lidr_tpos_t.shp"))
# plot with maptools
plot(chm_tree)
plot(vp_tree, add = T)
plot(pt, las=1, bty="l", col="red", pch=19, add = T)
plotRGB(rgb_tree)
plot(vp_tree, add = T)
plot(pt, las=1, bty="l", col="red", pch=19, add = T)
ttopst <- find_trees(last, lmf(ws = 3.5))
#library(rgdal)
# write data
writeOGR(ttopst, file.path(envrmt$path_002_processed, "lidr_tpos_t.shp"),layer="testShape",driver="ESRI Shapefile")
pt   <-  rgdal::readOGR(file.path(envrmt$path_002_processed,"lidr_tpos_t.shp"))
# plot with maptools
plot(chm_tree)
plot(vp_tree, add = T)
plot(pt, las=1, bty="l", col="red", pch=19, add = T)
plotRGB(rgb_tree)
plot(vp_tree, add = T)
plot(pt, las=1, bty="l", col="red", pch=19, add = T)
# 3d plot
x = plot(last)
add_treetops3d(x, ttopst)
ttopss <- lidR::find_trees(lass, lmf(ws = 5))
# write data
writeOGR(ttopss, file.path(envrmt$path_002_processed, "lidr_tpos_s.shp"),layer="testShape",driver="ESRI Shapefile")
ps   <-  rgdal::readOGR(file.path(envrmt$path_002_processed,"lidr_tpos_s.shp"))
# plot with maptools
plot(chm_shrub)
plot(vp_shrub, add = T)
plot(ps, las=1, bty="l", col="red", pch=19, add = T)
ttopss <- lidR::find_trees(lass, lmf(ws = 3))
# write data
writeOGR(ttopss, file.path(envrmt$path_002_processed, "lidr_tpos_s.shp"),layer="testShape",driver="ESRI Shapefile")
ps   <-  rgdal::readOGR(file.path(envrmt$path_002_processed,"lidr_tpos_s.shp"))
# plot with maptools
plot(chm_shrub)
plot(vp_shrub, add = T)
plot(ps, las=1, bty="l", col="red", pch=19, add = T)
ttopss <- lidR::find_trees(lass, lmf(ws = 1))
# write data
writeOGR(ttopss, file.path(envrmt$path_002_processed, "lidr_tpos_s.shp"),layer="testShape",driver="ESRI Shapefile")
ps   <-  rgdal::readOGR(file.path(envrmt$path_002_processed,"lidr_tpos_s.shp"))
# plot with maptools
plot(chm_shrub)
plot(vp_shrub, add = T)
plot(ps, las=1, bty="l", col="red", pch=19, add = T)
ttopss <- lidR::find_trees(lass, lmf(ws = 1.5))
# write data
writeOGR(ttopss, file.path(envrmt$path_002_processed, "lidr_tpos_s.shp"),layer="testShape",driver="ESRI Shapefile")
ps   <-  rgdal::readOGR(file.path(envrmt$path_002_processed,"lidr_tpos_s.shp"))
# plot with maptools
plot(chm_shrub)
plot(vp_shrub, add = T)
plot(ps, las=1, bty="l", col="red", pch=19, add = T)
plotRGB(rgb_shrub)
plot(vp_shrub, add = T)
plot(ps, las=1, bty="l", col="red", pch=19, add = T)
# 3d plot
x = plot(lass)
add_treetops3d(x, ttopss)
ttopsts <- find_trees(lasts, lmf(ws = 5))
# write data
writeOGR(ttopsts, file.path(envrmt$path_002_processed, "lidr_tpos_ts.shp"),layer="testShape",driver="ESRI Shapefile")
pts   <-  rgdal::readOGR(file.path(envrmt$path_002_processed,"lidr_tpos_ts.shp"))
# plot with maptools
plot(chm_tree_shrub)
plot(vp_tree_shrub, add = T)
plot(pts, las=1, bty="l", col="red", pch=19, add = T)
ttopsts <- find_trees(lasts, lmf(ws = 4))
# write data
writeOGR(ttopsts, file.path(envrmt$path_002_processed, "lidr_tpos_ts.shp"),layer="testShape",driver="ESRI Shapefile")
pts   <-  rgdal::readOGR(file.path(envrmt$path_002_processed,"lidr_tpos_ts.shp"))
# plot with maptools
plot(chm_tree_shrub)
plot(vp_tree_shrub, add = T)
plot(pts, las=1, bty="l", col="red", pch=19, add = T)
ttopsts <- find_trees(lasts, lmf(ws = 6))
# write data
writeOGR(ttopsts, file.path(envrmt$path_002_processed, "lidr_tpos_ts.shp"),layer="testShape",driver="ESRI Shapefile")
pts   <-  rgdal::readOGR(file.path(envrmt$path_002_processed,"lidr_tpos_ts.shp"))
# plot with maptools
plot(chm_tree_shrub)
plot(vp_tree_shrub, add = T)
plot(pts, las=1, bty="l", col="red", pch=19, add = T)
plotRGB(rgb_tree_shrub)
plot(vp_tree_shrub, add = T)
plot(pts, las=1, bty="l", col="red", pch=19, add = T)
# 3d plot
x = plot(lasts)
add_treetops3d(x, ttopsts)
require(raster)
require(envimaR)
require(link2GI)
# define needed libs
libs = c("link2GI","sf","mapview","rgdal","CENITH","doParallel","parallel","uavRst","maptools")
# define src folder
pathdir = "repo/src/"
#set root folder for uniPC or laptop
root_folder = alternativeEnvi(root_folder =  "C:/Users/Niklas/Documents/GitHub/Treelines-of-the-world",
alt_env_id = "COMPUTERNAME",
alt_env_value = "PCRZP",
alt_env_root_folder = "F:/edu/Envimaster-Geomorph")
#source environment script
source(file.path(root_folder, paste0(pathdir,"01b_environment_setup_with_SAGA.R")))
chm_tree_shrub  <- raster::raster(file.path(envrmt$path_03_Segmentation_sites_CHM, "CHM_tree_shrub.tif"))
chm_tree        <- raster::raster(file.path(envrmt$path_03_Segmentation_sites_CHM, "CHM_tree.tif"))
chm_shrub       <- raster::raster(file.path(envrmt$path_03_Segmentation_sites_CHM, "CHM_shrub.tif"))
rgb_tree_shrub  <- raster::stack(file.path(envrmt$path_03_Segmentation_sites_RGB, "RGB_tree_shrub.tif"))
rgb_tree        <- raster::stack(file.path(envrmt$path_03_Segmentation_sites_RGB, "RGB_tree.tif"))
rgb_shrub       <- raster::stack(file.path(envrmt$path_03_Segmentation_sites_RGB, "RGB_shrub.tif"))
vp_tree_shrub   <-  rgdal::readOGR(file.path(envrmt$path_03_Segmentation_sites_shp,"ft_tpos_ts.shp"))
vp_tree         <-  rgdal::readOGR(file.path(envrmt$path_03_Segmentation_sites_shp,"ft_tpos_t.shp"))
vp_shrub        <-  rgdal::readOGR(file.path(envrmt$path_03_Segmentation_sites_shp,"ft_tpos_s.shp"))
#run cluster
cl =  makeCluster(detectCores()-1)
registerDoParallel(cl)
# chm smoothing
chm_tree <- CHMsmoothing(chm_tree, filter = "Gaussian", ws = 39)
chm_shrub <- CHMsmoothing(chm_shrub, filter = "Gaussian", ws = 39)
chm_tree_shrub <- CHMsmoothing(chm_tree_shrub, filter = "Gaussian", ws = 39)
# chm smoothing
chm_tree <- CHMsmoothing(chm_tree, filter = "Gaussian", ws = 39)
install.packages('rLidar')
install.packages('rLiDAR')
chm_tree <- CHMsmoothing(chm_tree, filter = "Gaussian", ws = 39)
chm_shrub <- CHMsmoothing(chm_shrub, filter = "Gaussian", ws = 39)
chm_tree_shrub <- CHMsmoothing(chm_tree_shrub, filter = "Gaussian", ws = 39)
library(rLiDAR)
# chm smoothing
chm_tree <- CHMsmoothing(chm_tree, filter = "Gaussian", ws = 39)
chm_shrub <- CHMsmoothing(chm_shrub, filter = "Gaussian", ws = 39)
chm_tree_shrub <- CHMsmoothing(chm_tree_shrub, filter = "Gaussian", ws = 39)
# tree
rl_t <- treepos_RL(chm = chm_tree,
movingWin = 23,
minTreeAlt = 1.5)
install.packages('uavRst')
devtools::install_github("gisma/uavRst", ref = "develop")
library(uavRst)
devtools::install_github("gisma/uavRst", ref = "develop")
